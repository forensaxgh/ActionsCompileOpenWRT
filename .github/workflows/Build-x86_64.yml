name: Build OpenWrt x86-64
on: 
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * *
env:
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
    - name: 释放磁盘空间
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL /etc/mysql /etc/php $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli* docker* ghc* zulu* hhvm* llvm* firefox* google* dotnet* aspnetcore* powershell* openjdk* adoptopenjdk* mysql* php* mongodb* moby* snap* || true
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        echo "--------------------硬盘信息--------------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: 最大化磁盘空间
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: 检查硬盘信息
      run: |
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT


    - name: 安装依赖
      run: |
        sudo apt update
        sudo apt install build-essential clang flex bison g++ gawk \
        gcc-multilib g++-multilib gettext git libncurses-dev libssl-dev \
        python3-distutils rsync unzip zlib1g-dev file wget qemu-utils
        echo "-------------------------查看工作目录-------------------------"
        echo "当前位置："&& pwd
        echo "当前目录文件："&& ls -la
    - name: 迁出代码
      uses: actions/checkout@v3
    - name: 查看工作目录
      run: |
        echo "当前位置："&& pwd
        echo "当前目录文件："&& ls -la
    - name: 下载OpenWRT及其他包代码
      id: download_code
      run: |
        REPO_URL=https://github.com/openwrt/openwrt
        git clone $REPO_URL openwrt
        cd openwrt
        echo 所有分支：&&git branch -r
        echo 所有标签：&&git tag
        LATEST_BRANCH=$(git branch -r | sed 's/origin\///'|tail -n1)
        LATEST_TAG=$(git tag | grep -v 'rc'|tail -n1)
        echo 选择最新分支：$LATEST_BRANCH
        echo 选择最新非RC标签：$LATEST_TAG
        git checkout $LATEST_TAG
        rm -rf package/helloworld
        git clone --depth=1 https://github.com/fw876/helloworld.git package/helloworld
        git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon
        git clone https://github.com/openwrt/packages.git ../gogogo
        git clone https://github.com/xiaorouji/openwrt-passwall.git package/openwrt-passwall
        sed -i 's/192.168.1.1/10.10.10.100/g' package/base-files/files/bin/config_generate
        sed -i 's/192.168./10.10./g' package/base-files/files/bin/config_generate
        sed -i 's/root:::0:99999:7:::/root:$1$DLXGbdIi$CnUIT65bKyIhDXfR520dZ.:0:0:99999:7:::/g' package/base-files/files/etc/shadow
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        rm -rf feeds/packages/lang/golang
        cp -r ../gogogo/lang/golang/ feeds/packages/lang/
        git clone https://github.com/linkease/istore.git ./package/istore
        git clone https://github.com/linkease/nas-packages.git ./package/nas-packages
        git clone https://github.com/linkease/nas-packages-luci.git ./package/nas-packages-luci
        echo "repo_url=${REPO_URL}" >> $GITHUB_OUTPUT
        echo "latest_branch=${LATEST_BRANCH}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "-------------------------查看工作目录-------------------------"
        echo "当前位置："&& pwd
        echo "当前目录文件："&& ls -la
    - name: 复制.config文件
      run: |
        cd openwrt
        cp ../config/diffconfig .config
        make defconfig
    - name: 预下载软件包
      run: |
        cd openwrt 
        make download -j$(nproc) || make download -j1 V=s
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: 开始编译
      run: |
        wget -O "OpenWRT_Bin" https://github.com/Forensax/ActionsCompileOpenWRT/releases/download/v2024.10.30/OpenWRT_Bin_v2024.10.30.zip
        unzip -d openwrt OpenWRT_Bin
    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
    - name : 上传固件
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt Bin
        path: openwrt/bin
    - name: 打包Bin目录
      run: |
        zip -q -r OpenWRT_Bin_v$(date +"%Y.%m.%d").zip openwrt/bin
    - name: 生成发布标签
      id: tag
      run: |
        echo "release_tag=v$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "
        💻 架构: x86_64

        📂 源码: ${{ steps.download_code.outputs.repo_url }}

        🌳 分支: ${{ steps.download_code.outputs.latest_branch }}

        🔗 标签: ${{ steps.download_code.outputs.LATEST_TAG }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: 10.10.10.100

        👤 用户名: root

        🔒 密码: @Forensax " >> release.txt

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          openwrt/bin/targets/x86/64/*.*
          openwrt/bin/packages/x86_64/base/*passwall*
          openwrt/bin/packages/x86_64/base/*ssr-plus*
          OpenWRT_Bin*.zip
